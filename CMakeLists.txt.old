cmake_minimum_required(VERSION 2.8)
project( ProgCuda )
find_package( OpenCV REQUIRED )
#set(CUDA_SEPARABLE_COMPILATION ON)
find_package(CUDA QUIET REQUIRED)
set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -gencode arch=compute_30,code=sm_30)

#set(CUDA_SEPARABLE_COMPILATION ON)
#set(CUDA_PROPAGATE_HOST_FLAGS OFF)
#set(CUDA_HOST_COMPILER clang++)

# COMPILE CU FILES
#file(GLOB CUDA_FILES *.cu)
#list( APPEND CUDA_NVCC_FLAGS "-gencode arch=compute_30,code=sm_30")
#CUDA_COMPILE(CU_O ${CUDA_FILES})

# SETUP FOR CPP FILES
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
#file(GLOB SOURCES *.h *.cpp)
include_directories(/usr/local/cuda/include ${OpenCV_INCLUDE_DIRS})
#INCLUDE(FindCUDA)
FILE(GLOB SOURCES "*.cu" "*.cpp" "*.c" "*.h")
cuda_add_executable(ProgCuda ${SOURCES})
set_source_files_properties( main.cpp PROPERTIES CUDA_SOURCE_PROPERTY_FORMAT OBJ )
#link_directories(
#/usr/local/cuda/lib64
#/usr/local/lib
#)
#MESSAGE ("${CUDA_LIBRARIES}")
#target_link_libraries(ProgCuda ${OpenCV_LIBS} ${CUDA_LIBRARIES} )
#LIST(APPEND CMAKE_CXX_FLAGS "-std=c++0x -O3 -ffast-math -Wall")

#LIST(APPEND CUDA_NVCC_FLAGS --compiler-options -fno-strict-aliasing -lineinfo -use_fast_math -Xptxas -dlcm=cg)
#LIST(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_20,code=sm_20)
#LIST(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_30,code=sm_30)
#LIST(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_35,code=sm_35)

TARGET_LINK_LIBRARIES(ProgCuda ${OpenCV_LIBS} ${CUDA_LIBRARIES} /usr/local/cuda/lib64/libcudart.so)
